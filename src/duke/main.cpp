#include <duke/cmdline/CmdLineParameters.h>
#include <duke/engine/DukeApplication.h>
#include <duke/imageio/DukeIO.h>
#include <duke/benchmark/Benchmark.h>
#include "config.h" // autogenerated from config.h.in
int main(int argc, char** argv) {
    using namespace duke;
    try {
        const CmdLineParameters parameters(argc, argv);
        switch (parameters.mode) {
            case ApplicationMode::VERSION: {
                printf("Duke v%d.%d - #%s\n", DUKE_VERSION_MAJOR, DUKE_VERSION_MINOR, DUKE_GIT_SHA1); // autogenerated from config.h.in
                printf("Supported plugins :\n");
                for (const auto &pDescriptor : IODescriptors::instance().getDescriptors()) {
                    printf(" * %s : ", pDescriptor->getName());
                    for (const auto &extension : pDescriptor->getSupportedExtensions())
                        printf("%s ", extension.c_str());
                    printf("\n");
                }
                break;
            }
            case ApplicationMode::HELP:
                parameters.printHelpMessage();
                break;
            case ApplicationMode::BENCHMARK:
                benchmark();
                break;
            case ApplicationMode::DUKE:
                DukeApplication duke(parameters);
                duke.run();
                break;
        }
    } catch (duke::commandline_error &e) {
        fprintf(stderr, "Command line says : %s\n", e.what());
        return EXIT_FAILURE;
    } catch (std::exception &e) {
        fprintf(stderr, "Unexpected error\n%s\n", e.what());
        return EXIT_FAILURE;
    }
    return EXIT_SUCCESS;
}
