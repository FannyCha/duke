#ifndef SIMPLESHADERS_H_
#define SIMPLESHADERS_H_

/*
static const char* const IMAGE_DIM = "imageDim";
static const char* const DISPLAY_DIM = "displayDim";
static const char* const DISPLAY_MODE = "displayMode";
static const char* const IMAGE_RATIO = "imageRatio";
static const char* const ZOOM = "zoom";
static const char* const PANX = "panX";
static const char* const PANY = "panY";
*/

static const char* const fittableTransformVs = "float displayMode;\n"
    "float3 displayDim;\n"
    "float3 imageDim;\n"
    "float imageRatio;\n"
    "float panX;\n"
    "float panY;\n"
    "float zoom;\n"
    "\n"
    "struct vertexInput {\n"
    "   float3 Position :POSITION;\n"
    "   float2 UV :TEXCOORD0;\n"
    "};\n"
    "\n"
    "struct vertexOutput {\n"
    "   float4 HPosition :POSITION;\n"
    "   float2 UV :TEXCOORD0;\n"
    "};\n"
    "\n"
    "float4x4 projMatrixRH(float width,float height){\n"
    " \n"
    "\tconst float zNear = 0f;\n"
    "\tconst float zFar = 10f;\n"
    "   return float4x4(\n"
    "       (2/width)*zoom,    0,          0,                  0,\n"
    "       0,          (2/height)*zoom,   0,                  0,\n"
    "       0,          0,          1/(zNear-zFar),     0,\n"
    "       0,          0,          zNear/(zNear-zFar), 1\n"
    "   );\n"
    "}\n"
    "\n"
    "float4x4 scale(float x,float y,float z){\n"
    "   return float4x4(\n"
    "       x,  0,  0,  0,\n"
    "       0,  y,  0,  0,\n"
    "       -panX,  panY,  z,  0,\n"
    "       0,  0,  0,  1\n"
    "   );\n"
    "}\n"
    "\n"
    "float3x3 scale(float x,float y){\n"
    "   return float3x3(\n"
    "       x,  0,  0,\n"
    "       0,  y,  0,\n"
    "       0,  0,  1);\n"
    "}\n"
    "\n"
    "float3x3 translate(float x,float y){\n"
    "   return float3x3(\n"
    "       1,  0,  0,\n"
    "       0,  1,  0,\n"
    "       x,  y,  1);\n"
    "}\n"
    "\n"
    "vertexOutput main(vertexInput IN) {\n"
    "   const float4x4 view={\n"
    "       1,  0,  0,  0,\n"
    "       0,  1,  0,  0,\n"
    "       0,  0,  1,  0,\n"
    "       0,  0,  -10,  1\n"
    "   };\n"
    "\n"
    "   if(imageRatio != 0) imageDim.z = imageRatio;\n"
    "\n"
    "   float width = 1;\n" // stretch
    "   float height = 1 / imageDim.z;\n"
    "   \n"
    "   if(displayMode==0){\n" // 1:1 pixels
    "       const float constant = imageDim.x;\n"
    "       width = displayDim.x / constant ;\n"
    "       height = displayDim.y / constant ;\n"
    "   } else if(displayMode==1) {\n" // fit display Y
    "       width = displayDim.z;\n"
    "       height = 1;\n"
    "       width /= imageDim.z;\n"
    "       height /= imageDim.z ;\n"
    "   } else if(displayMode==2){\n" // fit display X
    "       width = 1;\n"
    "       height = 1 / displayDim.z ;\n"
    "   }\n"
    "   \n"
    "   vertexOutput OUT;\n"
    "\n"
    "   const float4x4 objectScale = scale(1,(1/imageDim.z),1);\n"
    "   const float4x4 proj = projMatrixRH( width, height );\n"
    "   const float4x4 mWVP = mul( mul( objectScale, view ), proj );\n"
    "   OUT.HPosition = mul( float4(IN.Position.xyz,1) , mWVP);\n"
    "   \n"
    "   float3x3 uvTransform = translate(.5,-.5);\n"
    "   uvTransform = mul( uvTransform, scale(1,-1) );\n"
    "   OUT.UV = mul( float3(IN.Position.xy,1), uvTransform ).xy ;\n"
    "   \n"
    "   return OUT;\n"
    "}\n";

#endif /* SIMPLESHADERS_H_ */
