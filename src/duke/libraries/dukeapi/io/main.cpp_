/*
 * main.cpp
 *
 *  Created on: 26 sept. 2011
 *      Author: Guillaume Chatelet
 */

#include "SocketMessageIO.h"
#include <iostream>

#include <boost/lexical_cast.hpp>
#include <boost/function.hpp>

using namespace std;
using namespace google::protobuf::serialize;
using namespace boost::asio;

void push(MessageQueue& queue, const char* message, MessageHolder_Action action = MessageHolder_Action_CREATE) {
    SharedHolder h(new MessageHolder());
    h->set_body(message);
    h->set_action(action);
    queue.push(h);
}

int main(int argc, char **argv) {
    using boost::asio::ip::tcp;
    MessageQueue in, out;

    auto sessionCreator = [&in, &out](io_service &io) {return new SocketMessageIO(io, in, out);};

    if (argc == 2) { //client
        const char *hostname = argv[1];
        cout << "trying to connect to " << hostname << endl;

        tcp::resolver::query query(hostname, boost::lexical_cast<string>(7171));

        push(out, "hello from client");
        push(out, "now disconnecting", MessageHolder_Action_CLOSE_CONNECTION);
        push(out, "disconnected ...");
        push(out, "dummy message");

        duke_client client(query, sessionCreator);
        client.run();

    } else if (argc == 1) { //server
        push(out, "This message was posted in the queue");
        push(out, "This one was also posted in the queue");

        tcp::endpoint endpoint(ip::tcp::v4(), 7171);
        duke_server server(endpoint, sessionCreator);
        server.run();
    }
}
