project site-config ;

# This file configures the external libraries needed by duke.

#-----------------------------------------------------------------------------#
# We are using Boost.Build, the build system embedded within Boost
# As a starter you need to understand how boost.build manages libraries
# http://www.boost.org/boost-build2/doc/html/bbv2/tasks/libraries.html
#
# A few examples
# --------------
# lib foo ;
# lib foo : : <name>foo ;
# lib foo : : <name>foo <os>LINUX ;
# lib foo : : <name>bar <os>NT ;
# lib foo : : <search>/path/to/foo  ;
# lib foo : : <file>/path/to/foo/libfoo.so  ;
# lib foo : : : : <include>/path/to/foo/include ;
# lib foo : : <name>foo <os>LINUX <search>/path/to/foo/lib : : <include>/path/to/foo/include ;
#
# An excellent introduction to Boost.Build can be found here
# http://www.highscore.de/cpp/boostbuild/
#-----------------------------------------------------------------------------#
	
#---------------------------#
#    Mandatory libraries    #
#---------------------------#

#-----------------------------------------------------------------------------#
# name     : Google Protocolbuffer
# purpose  : Defines duke's protocol to communicate internally and with other
#            applications  
#
# website  : http://code.google.com/p/protobuf/
# download : http://code.google.com/p/protobuf/downloads/list
#-----------------------------------------------------------------------------#
constant PROTO_ROOT : L:/protobuf-2.4.0a ;

local PROTO_INCLUDE = $(PROTO_ROOT)/include ;
local PROTO_LIB = $(PROTO_ROOT)/lib ;
local PROTO_BIN = $(PROTO_ROOT)/bin ;

lib protobuflib-dll : : <file>$(PROTO_BIN)/libprotobuf-7.dll ;
lib protobuf : : <search>$(PROTO_LIB) <os>NT:<library>protobuflib-dll : : <include>$(PROTO_INCLUDE) ;
lib protobuf : : <toolset>msvc <search>$(PROTO_LIB) <name>libprotobuf <os>NT:<library>protobuflib-dll : : <include>$(PROTO_INCLUDE) ;

constant PROTOC : $(PROTO_BIN)/protoc.exe ; # expected by duke build system

explicit protobuflib-dll protobuf ; # prevent building by default

#-----------------------------------------------------------------------------#
# name     : SFML2
# purpose  : Window creation and sound management
#
# website  : http://www.sfml-dev.org/
# download : http://www.sfml-dev.org/download.php
#
# NB : SFML will need openal32 and libsndfile libraries
#
#-----------------------------------------------------------------------------#

local SFML_ROOT = L:/SFML ;
local SFML_LIB = $(SFML_ROOT)/lib ;

local SFML_EXTLIB = $(SFML_ROOT)/extlibs/bin/x86 ;

lib openal32    : : <file>$(SFML_EXTLIB)/openal32.dll ;
lib libsndfile    : : <file>$(SFML_EXTLIB)/libsndfile-1.dll ;

lib sfml-graphics-2 : : <file>$(SFML_LIB)/sfml-graphics-2.dll ;
lib sfml-system-2   : : <file>$(SFML_LIB)/sfml-system-2.dll ;
lib sfml-window-2   : : <file>$(SFML_LIB)/sfml-window-2.dll ;
lib sfml-audio-2    : openal32 libsndfile : <file>$(SFML_LIB)/sfml-audio-2.dll ;

lib sfml-graphics  : : <search>$(SFML_LIB) <os>NT:<dependency>sfml-graphics-2 ;
lib sfml-system    : : <search>$(SFML_LIB) <os>NT:<dependency>sfml-system-2   ;
lib sfml-window    : : <search>$(SFML_LIB) <os>NT:<dependency>sfml-window-2   ;
lib sfml-audio     : : <search>$(SFML_LIB) <os>NT:<dependency>sfml-audio-2    ;

alias sfml : sfml-graphics sfml-system sfml-window sfml-audio 
		   : : : <include>$(SFML_ROOT)/include ;

# prevent building by default
explicit sfml sfml-graphics sfml-system sfml-window sfml-audio openal32 libsndfile ;

#-----------------------------------------------------------------------------#
# name     : Cg
# purpose  : Graphical toolkit
#
# website  : http://developer.nvidia.com/cg-toolkit
# download : http://developer.nvidia.com/cg-toolkit-download
#
#-----------------------------------------------------------------------------#

local CG_ROOT = "L:/NVIDIA Corporation/Cg" ;

lib cg : : <name>Cg <search>$(CG_ROOT)/lib
	   : : <include>$(CG_ROOT)/include ;


explicit cg ; # prevent building by default

#---------------------------#
#    Optional  libraries    #
#---------------------------#

# you can build either the OpenGL or DirectX9 backend ( or both )

#-----------------------------------------------------------------------------#
# name     : CgGL - OpenGL backend
#-----------------------------------------------------------------------------#

explicit cggl ;
lib cggl : : <name>CgGL <search>$(CG_ROOT)
	     : : <include>$(CG_ROOT)/include ;

explicit cggl ; # prevent building by default

#-----------------------------------------------------------------------------#
# name     : CgD3D - DirectX9 backend ( windows only )
#-----------------------------------------------------------------------------#

# CGD3D
local DX_SDK_ROOT = "L:/Microsoft DirectX SDK (February 2010)" ;
local DX_SDK_LIB  = $(DX_SDK_ROOT)/Lib/x86 ;

explicit d3dx9 ;
lib d3dx9 : : <os>NT <search>$(DX_SDK_LIB)
 	      : : <include>$(DX_SDK_ROOT)/Include ;
 	      
explicit d3d9 ;
lib d3d9  : : <os>NT <search>$(DX_SDK_LIB)
 	      : : <include>$(DX_SDK_ROOT)/Include ;

explicit cgd3d ;
lib cgd3d : d3d9 d3dx9 : <os>NT <name>cgD3D9 <search>$(CG_ROOT)
 	      : : <include>$(CG_ROOT)/include ;

explicit d3dx9 d3d9 cgd3d ; # prevent building by default

#-----------------------------------------------------------------------------#
# name     : TurboJpeg
# purpose  : adds support for jpeg (plugin)
#
# website  : http://sourceforge.net/projects/libjpeg-turbo/
# download : http://sourceforge.net/projects/libjpeg-turbo/files/1.1.1/
#-----------------------------------------------------------------------------#
local TURBO_JPEG_ROOT = L:/libjpeg-turbo-gcc ;

lib turbojpeg : : <search>$(TURBO_JPEG_ROOT)/lib 
 	      	  : : <include>$(TURBO_JPEG_ROOT)/include ;

explicit turbojpeg ; # prevent building by default

#-----------------------------------------------------------------------------#
# name     : OpenImageIO
# purpose  : adds support for various file format (plugin)
#
# website  : https://sites.google.com/site/openimageio/home
# download : https://github.com/OpenImageIO/oiio
#-----------------------------------------------------------------------------#
local OPENIMAGEIO_ROOT = /path/to/oiio ;

explicit oiio ;
lib oiio : : <name>OpenImageIO <os>LINUX <search>$(OPENIMAGEIO_ROOT)/libOpenImageIO
 	     : : <include>$(OPENIMAGEIO_ROOT)/include ;
lib oiio : : <os>NT ; 
lib oiio : : <os>MACOSX ;




#-----------------------------------------------------------------------------#
# Congratulations ! You're done : )
# Uncomment the following line.
#-----------------------------------------------------------------------------#
#constant duke_site_configuration : true ; 